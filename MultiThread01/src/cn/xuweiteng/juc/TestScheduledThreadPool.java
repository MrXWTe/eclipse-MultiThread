package cn.xuweiteng.juc;

import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * 线程池
 * JUC中线程池的体系结构：
 * java.util.concurrent.Executor:负责线程的使用和调度的根接口
 * 		|--ExecutorService	子接口：线程池的主要接口（**important）
 * 			|--ThreadPoolExecutor	实现类
 * 			|--ScheduledExecutorService 子接口：负责线程的调度
 * 				|--ScheduledThreadPoolExecutor ：继承 ThreadPoolExecutor， 实现 ScheduledExecutorService
 * 
 * JUC工具类 : Executors 
 * ExecutorService newFixedThreadPool() : 创建固定大小的线程池
 * ExecutorService newCachedThreadPool() : 缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。
 * ExecutorService newSingleThreadExecutor() : 创建单个线程池。线程池中只有一个线程
 * 
 * ScheduledExecutorService newScheduledThreadPool() : 创建固定大小的线程，可以延迟或定时的执行任务。
 * 
 * @author MrXu
 *
 */
public class TestScheduledThreadPool {
	public static void main(String[] args) throws Exception {
		ScheduledExecutorService pool = Executors.newScheduledThreadPool(5);

		for (int i = 0; i < 5; i++) {
			Future<Integer> result = pool.schedule(new Callable<Integer>() {

				@Override
				public Integer call() throws Exception {
					int num = new Random().nextInt(100);// 生成随机数
					System.out.println(Thread.currentThread().getName() + " : " + num);
					return num;
				}

			}, 2, TimeUnit.SECONDS);

			System.out.println(result.get());
		}

		pool.shutdown();
	}
}
